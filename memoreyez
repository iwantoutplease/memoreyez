import cv2
# get user supplied values
   image path = sys.argv[1]
   cascpath = sys.argv[2]
# create the haar cascade
   facecascade = cv2.cascadeclassifier (cascpath)
# read the image
   image = cv2.imread (imagepath)
   gray = cv2.cvtcolor (image, cv2.color_bgr2gray)
# detect faces in the image
    faces = facecascade.detectmultiscale(gray,scalefactor=1.1,minNeighbors=5,minSize=(30, 30),flags = cv2.cv. CV_HAAR_SCALE_IMAGE)
    print "found {0} faces!".format (len(faces))
# draw a rectangle around the face
   for (x,y,w,h) in faces: 
   cv2 rectangle (image,(x,y),(x+w,y+h), (0,255,0),2)
   cv2.imshow("faces found", image)
   cv2.waitkey(0)
   
   ****$python face_detect.py abba.png haarcascade_frontalface_default.xml***** <--- this is to check in a shell...(https://realpython.com)
   
***contact list lines 21-25***
def get_contact (contact, user_guide):
get_contact_url = "htpp:/" + "ip"
def create_contact (name, last_name, phone_number, description) + import line 16
create_contact_url = "http://" + "ip" 

***no idea how to test or if it is close to being accuate****

***alerting a device***
match found= [line 16 + line 24]
class device (models.model)+ (phone number)
serial number = models.uuidfeild()
if [line 16 + line 24] = true 
 print "match found" 
 print to (phone number)

***small camera code***
import numpy as np
import cv2
import time
import request
import threading
from threading import thread, event, thread error

class cam ():
  def__init__(self,url):
   self.stream = request.get(url,stream=true)
   self.thread_cancelled = false
   self.thread = thread(target = self,run)
   print "camera initialised"
   
  def start (self):
   self.thread.start()
   print "camera stream started"
   
  def run (self):
   bytes = ''
   while not self.thread_cancelled:
    try:
    bytes+=self.stream.raw.read()
    a = bytes.find ('\xff\xd8')
    b = bytes.find ('\xff\xd9')
    if a!=-1 and b!=-1:
    jpg = bytes [a:b:+14]
    img = 14
    cv2.imashow('cam',img)


